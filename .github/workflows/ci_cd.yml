name: Full CI/CD PipeLine

on:
  workflow_dispatch:     
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  issues: write
  pull-requests: write    
  actions: read
  security-events: write


jobs:
  print-info:
    name: (INF) Print INFORMATION
    runs-on: ubuntu-latest
    steps:
      - run: echo "Starting full CI/CD pipeline for ${{ github.event.pull_request.title }}"
  
  codeql:
    name: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ CodeQL
    runs-on: ubuntu-latest
    needs: print-info
    # strategy:
    #   matrix:
    #     language: [ 'python' ]  
    steps:
      - uses: actions/checkout@v3

      - name: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: –ê–≤—Ç–æ-—Å–±–æ—Ä–∫–∞
        uses: github/codeql-action/autobuild@v3

      - name: –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑
        uses: github/codeql-action/analyze@v3
        # with:
        #     upload: false # —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –ø—É—à–µ

  lint-python:
    name: Python lint (flake8)
    runs-on: ubuntu-latest
    needs: print-info
    steps:

      - uses: actions/checkout@v4
      - name: Set up venv
        run: |
          python3 -m venv .venv
          source .venv/bin/activate

      - name: Install flake8
        run: |
          source .venv/bin/activate  
          pip install flake8

      - name: Run flake8 (warnings only)
        run: |
          source .venv/bin/activate
          flake8 . --exit-zero

  label_sec:
    name: –ü–æ–º–µ—Ç–∏—Ç—å PR –ª–µ–π–±–ª–æ–º sec-passed
    runs-on: ubuntu-latest
    needs: [codeql, lint-python]
    if: ${{ success() && github.event_name == 'pull_request' }}
    steps:
      - name: –î–æ–±–∞–≤–∏—Ç—å –ª–µ–π–±–ª
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: sec-passed
  tests:
      name: "Test: ${{ matrix.file }}"
      runs-on: ubuntu-latest
      needs: [codeql, lint-python]
      strategy:
        fail-fast: false
        matrix:
          file:
            - tests/test_cli.py
            - tests/test_weather.py

      steps:
        - uses: actions/checkout@v4
        - name: Set up venv
          run: |
            python3 -m venv .venv
            source .venv/bin/activate
            pip install -r requirements.txt
        - name: Run ${{ matrix.file }}
          run: |
            source .venv/bin/activate
            pytest ${{ matrix.file }}
  label_test:
    name: –ü–æ–º–µ—Ç–∏—Ç—å PR –ª–µ–π–±–ª–æ–º test-passed
    runs-on: ubuntu-latest
    needs: [tests]
    if: ${{ success() && github.event_name == 'pull_request' }}
    steps:
      - name: –î–æ–±–∞–≤–∏—Ç—å –ª–µ–π–±–ª
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: test-passed
  bump-version:
    name: Bump Version
    needs: tests
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.pull_request.title, 'feature') || contains(github.event.pull_request.title, 'hotfix') }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0    

      - name: Bump version
        id: bump
        run: |
          TYPE=$(echo "${{ github.event.pull_request.title }}" | grep -oE 'feature|hotfix')
          ./bump-version.sh "$TYPE"

      - name: Commit & Push new version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          OLD=${{ steps.bump.outputs.old }}
          NEW=${{ steps.bump.outputs.new }}
          TYPE=${{ steps.bump.outputs.type }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add version
          git commit -m "[$NEW] <- [$OLD] $TYPE up"
          git push origin HEAD:${{ github.head_ref }}

      - name: Add PR label with version
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: ${{ steps.bump.outputs.new }}
  


  update-changelog:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        ref: ${{ github.head_ref }}
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update CHANGELOG.md
      id: changelog
      run: |
        CURRENT_DATE=$(date +"%Y-%m-%d")
        NEW_VERSION=$(cat version)
        BRANCH="${{ github.head_ref }}"
        PR_NUMBER="${{ github.event.pull_request.number }}"
        PR_TITLE="${{ github.event.pull_request.title }}"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –¥–ª—è changelog
        CHANGELOG_CONTENT="# Changelog\n\n"
        CHANGELOG_CONTENT+="## [${NEW_VERSION}] - ${CURRENT_DATE}\n"
        CHANGELOG_CONTENT+="### Branch: ${BRANCH} (PR #${PR_NUMBER})\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–º–µ–Ω–µ–Ω–∏–π
        if [[ "${{ contains(github.event.pull_request.labels.*.name, 'feature') }}" == "true" ]]; then
          CHANGELOG_CONTENT+="-  –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: ${PR_TITLE}\n\n"
        elif [[ "${{ contains(github.event.pull_request.labels.*.name, 'hotfix') }}" == "true" ]]; then
          CHANGELOG_CONTENT+="-  –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏: ${PR_TITLE}\n\n"
        else
          CHANGELOG_CONTENT+="- üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${PR_TITLE}\n\n"
        fi
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å
        if [ -f CHANGELOG.md ]; then
          tail -n +2 CHANGELOG.md >> temp_changelog
          echo -e "${CHANGELOG_CONTENT}" > CHANGELOG.md
          cat temp_changelog >> CHANGELOG.md
          rm temp_changelog
        else
          echo -e "${CHANGELOG_CONTENT}" > CHANGELOG.md
        fi  

    - name: Commit and push CHANGELOG.md
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        git commit -m "Update CHANGELOG.md for version $(cat version.txt)"
        git push origin ${{ github.head_ref }}

    - name: Add changelog label
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.addLabels({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['changelog']
          })

          
  create-release:
      name: –°–æ–∑–¥–∞—Ç—å Release –≤ GitHub
      runs-on: ubuntu-latest
      if: ${{ contains(fromJson(toJson(github.event.pull_request.labels)).*.name, 'PROD') && success() }}
      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: Read version and changelog description
          id: meta
          run: |
            VERSION=$(<version)
            DESCRIPTION=$(head -n 2 changelog.md | sed ':a;N;$!ba;s/\n/\\n/g')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT

        - name: Create GitHub Release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            tag_name: ${{ steps.meta.outputs.version }}
            release_name: Release ${{ steps.meta.outputs.version }}
            body: ${{ steps.meta.outputs.description }}
            draft: false
            prerelease: false
