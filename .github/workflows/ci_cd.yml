name: Full CI/CD PipeLine

on:
  workflow_dispatch:     
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  issues: write
  pull-requests: write    
  actions: read
  security-events: write


jobs:
  print-info:
    name: (INF) Print INFORMATION
    runs-on: ubuntu-latest
    steps:
      - run: echo "Starting full CI/CD pipeline for ${{ github.event.pull_request.title }}"
  
  codeql:
    name: Статический анализ CodeQL
    runs-on: ubuntu-latest
    needs: print-info
    # strategy:
    #   matrix:
    #     language: [ 'python' ]  
    steps:
      - uses: actions/checkout@v3

      - name: Инициализация CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Авто-сборка
        uses: github/codeql-action/autobuild@v3

      - name: Запустить анализ
        uses: github/codeql-action/analyze@v3
        # with:
        #     upload: false # удалить при пуше

  lint-python:
    name: Python lint (flake8)
    runs-on: ubuntu-latest
    needs: print-info
    steps:

      - uses: actions/checkout@v4
      - name: Set up venv
        run: |
          python3 -m venv .venv
          source .venv/bin/activate

      - name: Install flake8
        run: |
          source .venv/bin/activate  
          pip install flake8

      - name: Run flake8 (warnings only)
        run: |
          source .venv/bin/activate
          flake8 . --exit-zero

  label_sec:
    name: Пометить PR лейблом sec-passed
    runs-on: ubuntu-latest
    needs: [codeql, lint-python]
    if: ${{ success() && github.event_name == 'pull_request' }}
    steps:
      - name: Добавить лейбл
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: sec-passed
  tests:
      name: "Test: ${{ matrix.file }}"
      runs-on: ubuntu-latest
      needs: [codeql, lint-python]
      strategy:
        fail-fast: false
        matrix:
          file:
            - tests/test_cli.py
            - tests/test_weather.py

      steps:
        - uses: actions/checkout@v4
        - name: Set up venv
          run: |
            python3 -m venv .venv
            source .venv/bin/activate
            pip install -r requirements.txt
        - name: Run ${{ matrix.file }}
          run: |
            source .venv/bin/activate
            pytest ${{ matrix.file }}
  label_test:
    name: Пометить PR лейблом test-passed
    runs-on: ubuntu-latest
    needs: [tests]
    if: ${{ success() && github.event_name == 'pull_request' }}
    steps:
      - name: Добавить лейбл
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: test-passed
  bump-version:
    name: Bump Version
    needs: tests
    runs-on: ubuntu-latest
    if: ${{ contains(github.event.pull_request.title, 'feature') || contains(github.event.pull_request.title, 'hotfix') }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0    

      - name: Bump version
        id: bump
        run: |
          TYPE=$(echo "${{ github.event.pull_request.title }}" | grep -oE 'feature|hotfix')
          ./bump-version.sh "$TYPE"

      - name: Commit & Push new version
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          OLD=${{ steps.bump.outputs.old }}
          NEW=${{ steps.bump.outputs.new }}
          TYPE=${{ steps.bump.outputs.type }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add version
          git commit -m "[$NEW] <- [$OLD] $TYPE up"
          git push origin HEAD:${{ github.head_ref }}

      - name: Add PR label with version
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.PAT }}
          labels: ${{ steps.bump.outputs.new }}
  build-changelog:
    name: Формирование changelog.md
    runs-on: ubuntu-latest
    needs: bump-version
    if: ${{ github.event.label.name == 'changelog' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate changelog entry
        run: |
          DATE=$(date -u +"%Y-%m-%d")
          NEW=$(<version)
          BRANCH=${{ github.head_ref }}
          sed -i "1i- [$DATE] **$NEW**: branch ${BRANCH}" changelog.md

      - name: Commit & Push changelog
        env:
          GITHUB_TOKEN: ${{ secrets.PAT }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add changelog.md
          git commit -m "docs: add changelog entry for version $NEW"
          git push origin HEAD:${{ github.head_ref }}

      - name: Upload changelog as artifact
        uses: actions/upload-artifact@v3
        with:
          name: changelog
          path: changelog.md

  create-release:
      name: Создать Release в GitHub
      runs-on: ubuntu-latest
      needs: build-changelog
      if: ${{ github.event.label.name == 'PROD' }}
      steps:
        - name: Checkout
          uses: actions/checkout@v3
          with:
            fetch-depth: 0

        - name: Read version and changelog description
          id: meta
          run: |
            VERSION=$(<version)
            DESCRIPTION=$(head -n 2 changelog.md | sed ':a;N;$!ba;s/\n/\\n/g')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT

        - name: Create GitHub Release
          uses: actions/create-release@v1
          env:
            GITHUB_TOKEN: ${{ secrets.PAT }}
          with:
            tag_name: ${{ steps.meta.outputs.version }}
            release_name: Release ${{ steps.meta.outputs.version }}
            body: ${{ steps.meta.outputs.description }}
            draft: false
            prerelease: false
